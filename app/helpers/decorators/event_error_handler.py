from functools import wraps
from typing import Callable, Any, Coroutine

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes


from app.events.menu.states import MenuStates
def async_event_error_handler(func: Callable[[Update, ContextTypes.DEFAULT_TYPE], Coroutine[Any, Any, None]]):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Coroutine[Any, Any, None]:
        try:
            return await func(update, context)
        except Exception as e:
            message = update.effective_message
            keyboard = [
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            print(e)
            await message.reply_text("–Ø —Å–ª–æ–º–∞–ª—Å—è, —Å–∫–∞–∂–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –µ—Å–ª–∏ –º–æ–∂–µ—à—å –∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ \n\n"
                                     "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏ 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'",
                                     reply_markup=reply_markup
                                     )
            return MenuStates.UNDEFINED
    return wrapper